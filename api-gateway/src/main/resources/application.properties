# Eureka Client Service URL (secured with username and password)
eureka.client.service-url.defaultZone=http://eureka:password@localhost:8761/eureka
# Server Port for API Gateway
server.port=8080
# Spring Application Name
spring.application.name=api-gateway
# eureka.client.initial-instance-info-replication-interval-seconds=5
# eureka.client.registry-fetch-interval-seconds=5
# eureka.instance.lease-expiration-duration-in-seconds=5
# eureka.instance.lease-renewal-interval-in-seconds=5
# Eureka Configuration
eureka.instance.hostname=localhost
eureka.instance.prefer-ip-address=true
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
eureka.client.enabled=true
# Logging Configuration
logging.level.root=INFO
# Enable debug logging for Eureka and Discovery for better troubleshooting
logging.level.com.netflix.eureka=DEBUG
logging.level.com.netflix.discovery=DEBUG
# Enable detailed tracing for Spring Cloud Gateway routes
logging.level.org.springframework.cloud.gateway=TRACE
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO
# Enable service discovery for gateway routes using Eureka
spring.cloud.gateway.discovery.locator.enabled=true
# Gateway Routes Configuration
# Eureka Discovery Server Route (for accessing the Eureka dashboard via the API Gateway)
spring.cloud.gateway.routes[0].id=discovery-server
spring.cloud.gateway.routes[0].uri=http://localhost:8761
spring.cloud.gateway.routes[0].predicates[0]=Path=/eureka/web
# so we access the discovery server through http://localhost:8080/eureka/web
spring.cloud.gateway.routes[0].filters[0]=SetPath=/
#the filter defined above is to reroute the request from http://localhost:8080/eureka/web to http://localhost:8761
# which is really where our eureka discovery server resides
# Eureka Discovery Server Static Resources Route
spring.cloud.gateway.routes[1].id=discovery-server-static
spring.cloud.gateway.routes[1].uri=http://localhost:8761
spring.cloud.gateway.routes[1].predicates[0]=Path=/eureka
# Order Service Route (via service discovery)
spring.cloud.gateway.routes[2].id=order-service
spring.cloud.gateway.routes[2].uri=lb://ORDER-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/order/**
# Product Service Route (via service discovery)
spring.cloud.gateway.routes[3].id=product-service
spring.cloud.gateway.routes[3].uri=lb://PRODUCT-SERVICE
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/product/**
# Inventory Service Route (via service discovery)
spring.cloud.gateway.routes[4].id=inventory-service
spring.cloud.gateway.routes[4].uri=lb://INVENTORY-SERVICE
spring.cloud.gateway.routes[4].predicates[0]=Path=/api/inventory/**
# OAuth2 JWT Security Configuration for Gateway
# These values point to the Keycloak (or another identity provider) setup for your OAuth2 authentication
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-boot-microservices-realm
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8181/realms/spring-boot-microservices-realm/protocol/openid-connect/certs
# Timeout settings for Gateway HTTP Client (optional but recommended)
# spring.cloud.gateway.httpclient.connect-timeout=5000
# spring.cloud.gateway.httpclient.response-timeout=5000

# Enable tracing and set sampling probability to always sample
management.tracing.enabled=true
management.tracing.sampling.probability=1.0

# Configure Zipkin endpoint for tracing
management.tracing.zipkin.endpoint=http://localhost:9411

# Enable histogram buckets for Exemplars
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# Configure logging pattern to include traceId and spanId for better traceability
logging.pattern.level=%5p [${spring.application.name:}, %X{traceId:-}, %X{spanId:-}]

spring.boot.build.layered.enabled=true