# ==============================
# APPLICATION CONFIGURATION
# ==============================
spring.config.import=optional:classpath:.env
spring.application.name=order-service
server.port=8080

# ==============================
# DATABASE CONFIGURATION (PostgreSQL)
# ==============================
#spring.datasource.url=jdbc:postgresql://postgres:5432/orderDB
#spring.datasource.username=postgres
#spring.datasource.password=postgres
#spring.datasource.driver-class-name=org.postgresql.Driver

spring.datasource.url=jdbc:postgresql://postgres:5432/orderDB
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# ==============================
# JPA CONFIGURATION
# ==============================
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.show-sql=true

# ==============================
# EUREKA CLIENT CONFIGURATION
# ==============================
eureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://eureka:password@discovery-server:8761/eureka}
#eureka.instance.hostname=${EUREKA_INSTANCE_HOSTNAME:order-service}
#eureka.instance.instance-id=${spring.application.name}:${server.port}
#eureka.instance.prefer-ip-address=true
#eureka.client.registerWithEureka=true
#eureka.client.fetchRegistry=true
#eureka.client.enabled=true
#eureka.client.healthcheck.enabled=true

# ==================================
# SPRING CLOUD GATEWAY CONFIGURATION
# ==================================
# Enable service discovery for Gateway routes
#spring.cloud.gateway.discovery.locator.enabled=true

# =================================
# MANAGEMENT & HEALTH CONFIGURATION
# =================================
management.health.circuit-breakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoints.health.show-details=always

# ==============================
# RESILIENCE4J CONFIGURATION
# ==============================
# Circuit Breaker for Inventory Service
resilience4j.circuit-breaker.instances.inventory.register-health-indicator=true
resilience4j.circuit-breaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuit-breaker.instances.inventory.sliding-window-type=COUNT_BASED
resilience4j.circuit-breaker.instances.inventory.sliding-window-size=5
resilience4j.circuit-breaker.instances.inventory.failure-rate-threshold=50
resilience4j.circuit-breaker.instances.inventory.wait-duration-in-open-state=5s
resilience4j.circuit-breaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
resilience4j.circuit-breaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true

# Time Limiter for Inventory Service
resilience4j.time-limiter.instances.inventory.timeout-duration=2s
resilience4j.time-limiter.instances.inventory.cancel-running-future=true

# Retry for Inventory Service
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

# ==============================
# TRACING & METRICS CONFIGURATION
# ==============================
#management.tracing.enabled=true
#management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=${MANAGEMENT_TRACING_ZIPKIN_ENDPOINT:http://zipkin:9411/api/v2/spans}
#management.metrics.distribution.percentiles-histogram.http.server.requests=true

# Include Trace and Span IDs in Logs
#logging.pattern.level=%5p [${spring.application.name:}, %X{traceId:-}, %X{spanId:-}]

# ==============================
# KAFKA CONFIGURATION
# ==============================
spring.kafka.bootstrap-servers=kafka:29092
#spring.kafka.template.default-topic=notificationTopic
#spring.kafka.producer.group-id=notificationId
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#spring.kafka.producer.properties.spring.json.type.mapping=event:com.arseniolourenco.order_service.event.OrderPlacedEvent