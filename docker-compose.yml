#version: '3.9'

services:

  #   üöÄInfrastructure Services
  #  ‚Ä¢	zookeeper
  #  ‚Ä¢	kafka

  # ‚úÖ Zookeeper (Required by Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  # ‚úÖ Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper  # Ensures Kafka starts only after Zookeeper is ready
    networks:
      - microservices-network
  #    volumes:
  #      - kafka_data:/var/lib/kafka/data
  #    healthcheck:
  #      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list" ]
  #      interval: 30s
  #      retries: 5
  #      start_period: 30s
  #      timeout: 10s

  #  üìäMonitoring & Observability
  #  ‚Ä¢	zipkin
  #  ‚Ä¢	kafka-ui
  #  ‚Ä¢	kafdrop

  # ‚úÖ Zipkin (Distributed Tracing)
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped
    networks:
      - microservices-network
#    healthcheck:
#      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9411/health" ]
#      interval: 10s
#      retries: 5
#      start_period: 15s

  # ‚úÖ Kafka UI (for Monitoring)
  #  kafka-ui:
  #    image: provectuslabs/kafka-ui:latest
  #    container_name: kafka-ui
  #    restart: always
  #    ports:
  #      - "8090:8080"
  #    environment:
  #      KAFKA_CLUSTERS_0_NAME: local
  #      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
  #    depends_on:
  #      - kafka
  #    networks:
  #      - microservices-network

  # ‚úÖ Kafdrop (for Monitoring)
  #  kafdrop:
  #    image: obsidiandynamics/kafdrop
  #    container_name: kafdrop
  #    restart: always
  #    depends_on:
  #      - kafka
  #    ports:
  #      - "9000:9000"
  #    environment:
  #      KAFKA_BROKERCONNECT: kafka:29092
  #      JVM_OPTS: "-Xms32M -Xmx64M"
  #    networks:
  #      - microservices-network

  #  üóÑ Databases
  #  ‚Ä¢	mysql (for Keycloak & Inventory)
  #  ‚Ä¢	postgres (for Orders)
  #  ‚Ä¢	mongoDB (for Product Service)

  # ‚úÖ MySQL Database
  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - ./mysql_data:/var/lib/mysql
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u${MYSQL_ROOT_USER:-root}", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 10s
      retries: 10
      start_period: 30s

  # ‚úÖ PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      retries: 5
      start_period: 20s

  # ‚úÖ MongoDB for Product Service
  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - ./mongo_data:/data/db
#        - ./mongo-init-scripts:/docker-entrypoint-initdb.d # ‚úÖ Place initialization scripts here
    networks:
      - microservices-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@localhost:27017/admin || exit 1
      interval: 10s
      retries: 5
      start_period: 20s

  #  üîê Security & Authentication
  #  ‚Ä¢	keycloak

  # ‚úÖ Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.2
    container_name: keycloak
    restart: always
    ports:
      - "8080:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    command: [ "start-dev", "--import-realm" ]
    volumes:
      - ./keycloak_data:/opt/keycloak/data  # Persistent Keycloak storage
      - ./realms/:/opt/keycloak/data/import/  # Import realms on startup
    networks:
      - microservices-network

  #    ‚öôÔ∏è Core Backend Services
  #    ‚Ä¢  discovery-server
  #    ‚Ä¢  api-gateway
  #    ‚Ä¢  order-service
  #    ‚Ä¢  inventory-service
  #    ‚Ä¢  notification-service
  #    ‚Ä¢  product-service

  discovery-server:
    #    image: discovery-server:latest
    image: arseniolourenco/discovery-server:latest
    platform: linux/amd64
    container_name: discovery-server
    restart: always
    pull_policy: always
    #    build:
    #      context: ./discovery-server
    #      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8761:8761"
    depends_on:
      zipkin:
        condition: service_healthy  # ‚úÖ Ensure Zipkin is healthy before starting
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "EUREKA_SERVER_URL" ]
      interval: 10s
      retries: 10
      start_period: 40s

  # ‚úÖ API Gateway
  api-gateway:
    #    image: api-gateway:latest
    image: arseniolourenco/api-gateway:latest
    platform: linux/amd64
    container_name: api-gateway
    restart: always
    pull_policy: always
    #    build:
    #      context: ./api-gateway
    #      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
#      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: ${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI}
#      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: ${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI}
    networks:
      - microservices-network
    ports:
      - "8181:8080"
    expose:
      - "8181"
    depends_on:
      discovery-server:
        condition: service_started
      keycloak:
        condition: service_started

  # ‚úÖ Order Service
  order-service:
    #    image: order-service:latest
    image: arseniolourenco/order-service:latest
    platform: linux/amd64
    container_name: order-service
    restart: always
    pull_policy: always
    #    build:
    #      context: ./order-service
    #      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      api-gateway:
        condition: service_started  # Waits for API Gateway to start
    #    ports:
    #      - "8282:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    networks:
      - microservices-network

  # ‚úÖ Inventory Service
  inventory-service:
    #    image: inventory-service:latest
    image: arseniolourenco/inventory-service:latest
    platform: linux/amd64
    container_name: inventory-service
    restart: always
    pull_policy: always
    #    build:
    #      context: ./inventory-service
    #      dockerfile: Dockerfile
    #    ports:
    #      - "8383:8080"
    env_file:
      - .env
    depends_on:
      api-gateway:
        condition: service_started
      mysql:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
    networks:
      - microservices-network

  # ‚úÖ Notification Service
  notification-service:
    #    image: notification-service:latest
    image: arseniolourenco/notification-service:latest
    platform: linux/amd64
    container_name: notification-service
    restart: unless-stopped
    pull_policy: always
    #    build:
    #      context: ./notification-service
    #      dockerfile: Dockerfile
    #    ports:
    #      - "8484:8080"
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_started
      api-gateway:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    networks:
      - microservices-network

  # ‚úÖ Product Service
  product-service:
    image: arseniolourenco/product-service:latest
    platform: linux/amd64
    container_name: product-service
    restart: unless-stopped
    pull_policy: always
#    build:
#      context: ./product-service
#      dockerfile: Dockerfile
#    ports:
#      - "8083:8083"
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    depends_on:
      mongo:
        condition: service_healthy  # ‚úÖ Ensures MongoDB is ready before starting
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started
    networks:
      - microservices-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - order-service
      - product-service
      - inventory-service
      - notification-service
      - api-gateway
    networks:
      - microservices-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    links:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - microservices-network

# ‚úÖ Define the Docker Network
networks:
  microservices-network:
    driver: bridge

# ‚úÖ Define Persistent Named Volumes
volumes:
  kafka_data: # ‚úÖ Kafka message storage
    driver: local
  zookeeper_data: # ‚úÖ Zookeeper metadata storage
    driver: local
  mongo_data: # ‚úÖ MongoDB persistent storage
    driver: local
  mysql_data: # ‚úÖ MySQL database storage
    driver: local
  postgres_data: # ‚úÖ PostgreSQL database storage
    driver: local
  keycloak_data: # ‚úÖ Keycloak persistent storage
    driver: local
  realms_data: # ‚úÖ realms persistent storage
    driver: local
