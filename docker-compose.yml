#version: '3.9'

services:

  #   üöÄInfrastructure Services
  #  ‚Ä¢	zookeeper
  #  ‚Ä¢	kafka

# ‚úÖ Zookeeper (Required by Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  # ‚úÖ Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: on-failure
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL:localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper  # Ensures Kafka starts only after Zookeeper is ready
    networks:
      - microservices-network
#    volumes:
#      - kafka_data:/var/lib/kafka/data
#    healthcheck:
#      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list" ]
#      interval: 30s
#      retries: 5
#      start_period: 30s
#      timeout: 10s

  #  üìäMonitoring & Observability
  #  ‚Ä¢	zipkin
  #  ‚Ä¢	kafka-ui
  #  ‚Ä¢	kafdrop

  # ‚úÖ Zipkin (Distributed Tracing)
  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: unless-stopped
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9411/health" ]
      interval: 10s
      retries: 5
      start_period: 15s

  # ‚úÖ Kafka UI (for Monitoring)
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    container_name: kafka-ui
#    restart: always
#    ports:
#      - "8090:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
#    depends_on:
#      - kafka
#    networks:
#      - microservices-network

  # ‚úÖ Kafdrop (for Monitoring)
#  kafdrop:
#    image: obsidiandynamics/kafdrop
#    container_name: kafdrop
#    restart: always
#    depends_on:
#      - kafka
#    ports:
#      - "9000:9000"
#    environment:
#      KAFKA_BROKERCONNECT: kafka:29092
#      JVM_OPTS: "-Xms32M -Xmx64M"
#    networks:
#      - microservices-network

  #  üóÑ Databases
  #  ‚Ä¢	mysql (for Keycloak & Inventory)
  #  ‚Ä¢	postgres (for Orders)
  #  ‚Ä¢	mongoDB (for Product Service)

  # ‚úÖ MySQL Database
  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: mauro
      MYSQL_PASSWORD: mauro007
      MYSQL_DATABASE: inventoryDB  # Only for initial setup, actual creation handled by init.sql
    volumes:
      - ./mysql_data:/var/lib/mysql  # Persistent MySQL storage
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Load DB schema
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-proot" ]
      interval: 10s
      retries: 10
      start_period: 30s

  # ‚úÖ PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orderDB
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      retries: 5
      start_period: 20s

  #  # ‚úÖ MongoDB for Product Service
  #  mongoDB:
  #    image: mongo:latest
  #    container_name: mongoDB
  #    restart: always
  #    ports:
  #      - "27017:27017"
  #    environment:
  #      MONGO_INITDB_ROOT_USERNAME: mongoadmin
  #      MONGO_INITDB_ROOT_PASSWORD: secret
  #      MONGO_INITDB_DATABASE: productDB
  #    volumes:
  #      - ./mongo-data:/data/db
  #      - ./mongo-init-scripts:/docker-entrypoint-initdb.d # ‚úÖ Place initialization scripts here
  #    networks:
  #      - microservices-network
  #    healthcheck: # ‚úÖ Ensures MongoDB is fully ready before dependent services start
  #      test: echo 'db.runCommand("ping").ok' | mongosh --quiet mongodb://mongoadmin:secret@localhost:27017/admin || exit 1
  #      interval: 10s
  #      retries: 5
  #      start_period: 20s

  #  üîê Security & Authentication
  #  ‚Ä¢	keycloak

  # ‚úÖ Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.2
    container_name: keycloak
    restart: always
    hostname: keycloak
    ports:
      - "8181:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
#      KC_HOSTNAME: keycloak
    command: [ "start-dev", "--import-realm" ]
    volumes:
      - ./keycloak_data:/opt/keycloak/data  # Persistent Keycloak storage
      - ./realms/:/opt/keycloak/data/import/  # Import realms on startup
    networks:
      - microservices-network

  #    ‚öôÔ∏è Core Backend Services
  #    ‚Ä¢  discovery-server
  #    ‚Ä¢  api-gateway
  #    ‚Ä¢  order-service
  #    ‚Ä¢  inventory-service
  #    ‚Ä¢  notification-service
  #    ‚Ä¢  product-service

  discovery-server:
    image: discovery-server:latest
    container_name: discovery-server
    restart: always
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    depends_on:
      zipkin:
        condition: service_healthy  # ‚úÖ Ensure Zipkin is healthy before starting
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT_TRACING_ZIPKIN_ENDPOINT: http://zipkin:9411/api/v2/spans
      ZIPKIN_BASE_URL: http://zipkin:9411
      EUREKA_INSTANCE_HOSTNAME: discovery-server
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://${EUREKA_USERNAME}:${EUREKA_PASSWORD}@discovery-server:8761/actuator/health" ]
      interval: 10s
      retries: 10
      start_period: 40s

  # ‚úÖ API Gateway
  api-gateway:
    image: api-gateway:latest
    container_name: api-gateway
    restart: always
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT_TRACING_ZIPKIN_ENDPOINT: http://zipkin:9411/api/v2/spans
      ZIPKIN_BASE_URL: http://zipkin:9411
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
      EUREKA_INSTANCE_HOSTNAME: api-gateway
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8181/realms/spring-boot-microservices-realm
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8181/realms/spring-boot-microservices-realm/protocol/openid-connect/certs
    networks:
      - microservices-network
    ports:
      - "8080:8080"
    depends_on:
      discovery-server:
        condition: service_started
      keycloak:
        condition: service_started
      zipkin:
        condition: service_started

  # ‚úÖ Order Service
  order-service:
    image: order-service:latest
    container_name: order-service
    restart: always
    build:
      context: ./order-service
      dockerfile: Dockerfile
    depends_on:
      api-gateway:
        condition: service_started  # Waits for API Gateway to start
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT_TRACING_ZIPKIN_ENDPOINT: http://zipkin:9411/api/v2/spans
      ZIPKIN_BASE_URL: http://zipkin:9411
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
      EEUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      EUREKA_INSTANCE_HOSTNAME: order-service
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/orderDB
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    networks:
      - microservices-network

  # ‚úÖ Inventory Service
  inventory-service:
    image: inventory-service:latest
    container_name: inventory-service
    restart: always
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    expose:
      - "8082"
    depends_on:
      api-gateway:
        condition: service_started
      mysql:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT_TRACING_ZIPKIN_ENDPOINT: http://zipkin:9411/api/v2/spans
      ZIPKIN_BASE_URL: http://zipkin:9411
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      EUREKA_INSTANCE_HOSTNAME: inventory-service
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/inventoryDB
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    networks:
      - microservices-network

  # ‚úÖ Notification Service
  notification-service:
    image: notification-service:latest
    container_name: notification-service
    restart: unless-stopped
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      kafka:
        condition: service_started
      api-gateway:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MANAGEMENT_TRACING_ZIPKIN_ENDPOINT: http://zipkin:9411/api/v2/spans
      ZIPKIN_BASE_URL: http://zipkin:9411
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: TRACE
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: ${EUREKA_SERVER_URL}
      EUREKA_INSTANCE_HOSTNAME: notification-service
      KAFKA_BROKER: kafka:29092
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - microservices-network


#  # ‚úÖ Product Service
#  product-service:
#    image: product-service:latest
#    container_name: product-service
#    restart: always
#    build:
#      context: ./product-service
#      dockerfile: Dockerfile
#    ports:
#      - "8083:8083"
#    environment:
#      SERVER_PORT: 8083
#
#      # ‚úÖ MongoDB Configuration
#      MONGODB_HOST: mongoDB  # ‚úÖ Use correct container name (was 'mongo')
#      MONGODB_PORT: 27017
#      MONGODB_USERNAME: mongoadmin
#      MONGODB_PASSWORD: secret
#      MONGODB_DATABASE: productDB
#      MONGODB_AUTH_DATABASE: admin
#
#      # ‚úÖ Eureka & Distributed Tracing
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "{EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}"
#      ZIPKIN_URL: http://zipkin:9411
#
#      # ‚úÖ Kafka Broker Configuration
#      KAFKA_BROKER: kafka:9092
#
#    depends_on:
#      mongoDB:
#        condition: service_healthy  # ‚úÖ Ensures MongoDB is ready before starting
#      discovery-server:
#        condition: service_started
#      api-gateway:
#        condition: service_started
#    networks:
#      - microservices-network
#


#  db = db.getSiblingDB('productDB');
#  db.createUser({
#  user: "productUser",
#  pwd: "productPass",
#  roles: [ { role: "readWrite", db: "productDB" } ]
#});


# ‚úÖ Define the Docker Network
networks:
  microservices-network:
    driver: bridge

# ‚úÖ Define Persistent Named Volumes
volumes:
  kafka_data:        # ‚úÖ Kafka message storage
    driver: local
  zookeeper_data:    # ‚úÖ Zookeeper metadata storage
    driver: local
  mongo_data:        # ‚úÖ MongoDB persistent storage
    driver: local
  mysql_data:        # ‚úÖ MySQL database storage
    driver: local
  postgres_data:     # ‚úÖ PostgreSQL database storage
    driver: local
  keycloak_data:     # ‚úÖ Keycloak persistent storage
    driver: local
