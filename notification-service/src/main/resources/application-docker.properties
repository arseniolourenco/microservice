# ===    Application Information   ===
spring.application.name=${NOTIFICATION_SERVICE_NAME}
server.port=${NOTIFICATION_SERVICE_PORT}

# ===   EUREKA CLIENT CONFIGURATION   ===
eureka.client.service-url.defaultZone=${EUREKA_SERVER_URL}
eureka.instance.hostname=${NOTIFICATION_SERVICE_INSTANCE_HOSTNAME}
eureka.instance.instance-id=${spring.application.name}:${server.port}
eureka.instance.prefer-ip-address=true
eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
eureka.client.enabled=true
eureka.client.healthcheck.enabled=true

# ===   TRACING / ZIPKIN   ===
management.tracing.enabled=true
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=${MANAGEMENT_TRACING_ZIPKIN_ENDPOINT}
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# ===    Spring Cloud Gateway Configuration    ===
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# ===    Spring Management & Health Actuator Endpoints   ===
management.endpoints.web.exposure.include=*
management.endpoints.health.show-details=always

# ===   Logging Configuration     ===
logging.level.root=INFO
logging.level.com.netflix.eureka=DEBUG
logging.level.com.netflix.discovery=DEBUG
logging.level.org.springframework.cloud.gateway=TRACE
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO

# Logging pattern to include traceId and spanId
logging.pattern.level=%5p [${spring.application.name:}, %X{traceId:-}, %X{spanId:-}]

# ===   Kafka Configuration   ===
spring.kafka.bootstrap-servers=kafka:29092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.consumer.group-id=notificationId

# Kafka Deserializers
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# JSON Type Mapping
spring.kafka.consumer.properties.spring.json.type.mapping=event:com.arseniolourenco.notification_service.OrderPlacedEvent
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.fail-on-unknown-properties=false
